#!/bin/bash -e

# -------------------------------------------------------------------------------------------------
# Functions
# -------------------------------------------------------------------------------------------------
BASEDIR=$(dirname $(readlink -f ${0}))
BASENAME=$(basename ${0})

source "${BASEDIR}/util.sh"

function usage {
  echo "Rebase the current branch with latest commit of <parent branch>"
  echo "The <remote> defaults to 'origin'"
  echo ""
  echo "Usage: ${BASENAME} [<remote>] <parent branch>"
  exit 0
}

# -------------------------------------------------------------------------------------------------
# Parse Arg
# -------------------------------------------------------------------------------------------------
if [[ ${#} -eq 1 && ("${1}" == "-h" || "${1}" == "--help") ]]
then
  usage
fi

if [[ ${#} -eq 0 ]]
then
  dieUsage "Invalid argument count ${#}"
fi

remote="origin"
if [[ ${#} -eq 1 ]]
then
  parBranch="${1}"
elif [[ ${#} -eq 2 ]]
then
  remote="${1}"
  parBranch="${2}"
fi

# -------------------------------------------------------------------------------------------------
# Main
# -------------------------------------------------------------------------------------------------
GIT_ROOT=$(git rev-parse --show-toplevel)

# Determine current branch
currBranch=$(git rev-parse --abbrev-ref HEAD)

# Update the <parBranch> from remote
set +e
heading "Update parent branch '${parBranch}'"
git checkout ${parBranch}
git pull ${remote} ${parBranch}
dieOnError "Git pull failed"

# Get back to current branch
git checkout ${currBranch}

# Determine merge point
mergePointSHA=$(git merge-base ${currBranch} ${parBranch})

heading "[Branch=${currBranch}] Top 10 commits BEFORE rebase"
git-history 10

heading "[Branch=${parBranch}] Parent is ahead by following commits"
git log --oneline ${mergePointSHA}..master

heading "Rebase current branch's position in parent branch '${parBranch}'"
git rebase ${parBranch}

checkMergeConflit
isConflict=$?
if [[ ${isConflict} -eq 1 ]]
then
  highlight "Double check the conflict resolution and execute 'git rebase --continue'"
  exit 0
fi

heading "[Branch=${currBranch}] Top 10 commits AFTER rebase"
git-history 10
