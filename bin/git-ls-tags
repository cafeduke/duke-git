#!/bin/bash -e

# -------------------------------------------------------------------------------------------------
# Functions
# -------------------------------------------------------------------------------------------------
BASEDIR=$(dirname $(readlink -f ${0}))
source "${BASEDIR}/util.sh"

function usage {
  echo "List tags along with the commit ids"
  echo "Usage: ${0}"
  exit 0
}

# -------------------------------------------------------------------------------------------------
# Parse Arg
# -------------------------------------------------------------------------------------------------
if [[ ${#} -eq 1 && ("${1}" == "-h" || "${1}" == "--help") ]]
then
  usage
fi

if [[ ${#} -ne 0 ]]
then
  dieUsage "Incorrect argument count"
fi  
# -------------------------------------------------------------------------------------------------
# Main
# -------------------------------------------------------------------------------------------------
rm -f /tmp/tag
for tag in $(git tag --list)    
do
  # The text has two lines of output
  text=$(git show -s --format="%S|%h|%s|%an|%cI" ${tag} | tail -2)

  # Tag subject is the first line
  tag_subject=$(echo "${text}" | head -1 | tr -d '\n' )
  tag_field=$(echo "${text}" | tail -1 | tr -d '\n')

  # Convert the '|' separated fields in text to array
  arr_tag=()
  mapfile -t -d '|' arr_tag <<< ${tag_field} 

  # Unfortunately, mapfile shall result in the last field having an additional newline
  # len=${#arr_tag[@]}
  arr_tag[len-1]=$(trim ${arr_tag[len-1]})

  # Appending to array using double quotes will ensure a single string is added 
  # (rather than individual words of the string each added as array element)
  arr_tag+=("${tag_subject}")

  printf "%s|%s|%s|%s|%s|%s\n" "${arr_tag[0]}" "'${arr_tag[5]}'" "${arr_tag[1]}" "'${arr_tag[2]}'" "${arr_tag[3]}" "${arr_tag[4]}"  >> /tmp/tag
 
done
column -t -s'|' /tmp/tag
rm -f /tmp/tag
