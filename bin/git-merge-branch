#!/bin/bash -e

# -------------------------------------------------------------------------------------------------
# Functions
# -------------------------------------------------------------------------------------------------
BASEDIR=$(dirname $(readlink -f ${0}))
BASENAME=$(basename ${0})

source "${BASEDIR}/util.sh"

function usage {
  echo "Merge <source/child branch> into <target/parent branch>"
  echo "The <target branch> defaults to the current branch"
  echo ""
  echo "Usage: ${BASENAME} [--squash] <source/child branch> [<target/parent branch>]"
  echo ""
  echo "Working:"
  echo "  - Switch to <target> branch and merge <source> into it."
  echo "  - The <source> branch remains unaltered after merge."
  echo ""
  echo "Options:"
  echo "  --squash : Combine all the commints of <source/child branch> into a single commit"
  exit 0
}

# -------------------------------------------------------------------------------------------------
# Parse Arg
# -------------------------------------------------------------------------------------------------
if [[ ${#} -eq 1 && ("${1}" == "-h" || "${1}" == "--help") ]]
then
  usage
fi

squashChildCommits=""
if [[ ${#} -ge 1 && "${1}" == "--squash" ]]
then
  squashChildCommits=" --squash "
  shift
fi

if [[ ${#} -eq 1 ]]
then
  childBranch="${1}"
  parentBranch=$(git branch --show-current)
elif [[ ${#} -eq 2 ]]
then
  childBranch="${1}"
  parentBranch="${2}"
else
  dieUsage "Incorrect argument count ${#}"
fi

# -------------------------------------------------------------------------------------------------
# Main
# -------------------------------------------------------------------------------------------------

heading "Merge ${childBranch} --> ${parentBranch}"
if [[ "${childBranch}" == "${parentBranch}" ]]
then
  dieOnError "Source and target are same"
fi

set +e

heading "Pull latest commits from origin/${parentBranch}"
git checkout ${parentBranch}
git pull origin ${parentBranch}
dieOnError "Git pull failed"

heading "[TargetBranch=${parentBranch}] Top 10 commits"
echo "git-history-commits ${parentBranch} 10"
git-history-commits ${parentBranch} 10

heading "[SourceBranch=${childBranch}] Top 10 commits"
echo "git-history-commits ${childBranch} 10"
git-history-commits ${childBranch} 10

heading "Merge ${childBranch} --> ${parentBranch}"
checkAndProceed "Merge ${childBranch}"
git merge ${squashChildCommits} ${childBranch}

checkMergeConflit
isConflict=$?
if [[ ${isConflict} -eq 1 ]]
then
  highlight "Double check the conflict resolution and execute 'git commit --all -m <commit message>'"
  exit 0
fi

heading "[Branch=${parentBranch}] Top 10 commits AFTER merge"
git-history 10
